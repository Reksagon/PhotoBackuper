using System;
using System.Collections.Generic;
using System.Linq;

namespace TicTacToe
{
	class Program
	{
		static void Main(string[] args)
		{
			var stillPlaying = true;

			Console.ForegroundColor = ConsoleColor.Green;
			Console.WriteLine("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			Console.WriteLine("\tКРЕСТИКИ НОЛИКИ!");
			Console.WriteLine("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
			Console.ResetColor();

			while (stillPlaying)
			{
				Console.ForegroundColor = ConsoleColor.Cyan;
				Console.WriteLine("\t       МЕНЮ:");
				Console.WriteLine("     1. Начать новую игру");
				Console.WriteLine("     2. Статистика");
				Console.WriteLine("     3. Выход\n");
				
				Console.Write("     Ввод: ");
				Console.ForegroundColor = ConsoleColor.Red;
				var choice = Input("[123]");
				Console.ResetColor();

				switch (choice)
				{
					case "1":
						PlayGame();
						Console.Clear();
						break;
					case "2":
						Statistics();
						break;
					case "3":
						stillPlaying = false;
						break;
				}
			}
		}
		static int count = 0; // кол-во игр
		static int x_win = 0; // кол-во побед х
		static int o_win = 0; // кол-во обед о
		static int x_pts = 0; // кол-во птс
		static int o_pts = 0; // кол-во птс
		private static string Input(string valid = null)
		{
			var input = Console.ReadLine();
			input = input.Trim();

			if (valid != null && !System.Text.RegularExpressions.Regex.IsMatch(input, valid))
			{
				Console.ForegroundColor = ConsoleColor.Red;
				Console.WriteLine("\tСделайте правильный выбор!\n");
				Console.ResetColor();
				return null;
			}
			return input;
		}

		private static void PlayGame()
		{
			string Rows = null;
			while (Rows == null)
			{
				Console.Clear();
				Console.ForegroundColor = ConsoleColor.Yellow;
				Console.WriteLine("\tУРОВНИ СЛОЖНОСТИ");
				Console.WriteLine("   1. Обычный (3х3)\n   2. Средний (4х4)\n   3. Высокий (5х5)\n");
				Console.Write("   Выберите уровень сложности: ");
				Console.ForegroundColor = ConsoleColor.Red;
				Rows = Input("[123]");
				Console.ResetColor();
			}
			var boardSize = (int)Math.Pow(int.Parse(Rows)+2, 2);
			var board = new string[boardSize];
			
			var move = "X";
			while (true)
			{
				Console.Clear();
				
				var winner = Win(board);
				if (winner != null)
				{
					count++;
					if (winner[0] == 'X')
					{
						x_win++;
						x_pts += 10;
						
					}
					else if (winner[0] == 'O')
					{
						o_win++;
						o_pts += 10;
					}
					Result("\t" + winner[0] + " ПОБЕДА!!!", board);
					break;
				}
				if (Draw(board))
				{
					count++;
					Result("\tНИЧЬЯ!!!", board);
					break;
				}
				Console.ForegroundColor = ConsoleColor.Green;
				Console.WriteLine("     Ход " + move + ":");
				Console.ResetColor();

				DrawBoard(board);

				Console.ForegroundColor = ConsoleColor.Green;
				Console.WriteLine("Сделайте свой ход");
				Console.ResetColor();

				var XO = GetXOLocation(board);
				board[XO] = move;

				move = move == "X" ? "O" : "X";
			}
		}
		private static void Statistics()
		{
			Console.Clear();
			Console.ForegroundColor = ConsoleColor.Magenta;
			Console.WriteLine("       Всего игр: " + count);
			Console.WriteLine("       Побед Х: " + x_win + " = " + x_pts + " очков");
			Console.WriteLine("       Побед О: " + o_win + " = " + o_pts + " очков");
			Console.Write("Нажмите любую клавишу...");
			Console.ResetColor();
			Console.CursorVisible = false;
			Console.ReadKey();
			Console.CursorVisible = true;
			Console.ResetColor();
			Console.Clear();
		}
		private static void Result(string message, string[] board)
		{
			Console.WriteLine();
			DrawBoard(board);

			Console.ForegroundColor = ConsoleColor.Red;
			Console.WriteLine(message);
			Console.Write("Нажмите любую клавишу...");
			Console.ResetColor();
			Console.CursorVisible = false;
			Console.ReadKey();
			Console.CursorVisible = true;
		}

		private static int GetXOLocation(string[] board)
		{
			int numRows = (int)Math.Sqrt(board.Length);

			int curRow = 0, curCol = 0;

			for (int i = 0; i < board.Length; i++)
			{
				if (board[i] == null)
				{
					curRow = i / numRows;
					curCol = i % numRows;
					break;
				}
			}

			while (true)
			{
				Console.SetCursorPosition(curCol * 4 + 2, curRow * 4 + 3);
				var keyInfo = Console.ReadKey();
				Console.SetCursorPosition(curCol * 4 + 2, curRow * 4 + 3);
				Console.Write(board[curRow * numRows + curCol] ?? " ");

				switch (keyInfo.Key)
				{
					case ConsoleKey.LeftArrow:
						if (curCol > 0)
							curCol--;
						break;
					case ConsoleKey.RightArrow:
						if (curCol + 1 < numRows)
							curCol++;
						break;
					case ConsoleKey.UpArrow:
						if (curRow > 0)
							curRow--;
						break;
					case ConsoleKey.DownArrow:
						if (curRow + 1 < numRows)
							curRow++;
						break;
					case ConsoleKey.Spacebar:
					case ConsoleKey.Enter:
						if (board[curRow * numRows + curCol] == null)
							return curRow * numRows + curCol;
						break;
				}
			}
		}

		private static void DrawBoard(string[] board)
		{
			var row = (int)Math.Sqrt(board.Length);

			Console.WriteLine();

			for (int i = 0; i < row; i++)
			{
				if (i != 0)
					Console.WriteLine(" " + string.Join("|", Enumerable.Repeat("---", row)));

				Console.Write(" " + string.Join("|", Enumerable.Repeat("   ", row)) + "\n ");

				for (int j = 0; j < row; j++)
				{
					if (j != 0)
						Console.Write("|");
					var space = board[i * row + j] ?? " ";
					if (space.Length > 1)
						Console.ForegroundColor = ConsoleColor.Red;
					Console.Write(" " + space[0] + " ");
					Console.ResetColor();
				}

				Console.WriteLine("\n " + string.Join("|", Enumerable.Repeat("   ", row)));
			}

			Console.WriteLine();
		}

		private static bool Draw(IEnumerable<string> board)
		{
			return board.All(space => space != null);
		}

		private static string Win(string[] board)
		{
			var row = (int)Math.Sqrt(board.Length);
			// Проверяем ряды
			for (int i = 0; i < row; i++)
			{
				if (board[i * row] != null)
				{
					bool hasTicTacToe = true;
					for (int col = 1; col < row && hasTicTacToe; col++)
					{
						if (board[i * row + col] != board[i * row])
							hasTicTacToe = false;
					}
					if (hasTicTacToe)
					{
						for (int col = 0; col < row; col++)
							board[i * row + col] += "!";
						return board[i * row];
					}
				}
			}

			// Проверяем колонки
			for (int i = 0; i < row; i++)
			{
				if (board[i] != null)
				{
					bool hasTicTacToe = true;
					for (int j = 1; j < row && hasTicTacToe; j++)
					{
						if (board[j * row + i] != board[i])
							hasTicTacToe = false;
					}
					if (hasTicTacToe)
					{
						for (int k = 0; k < row; k++)
							board[k * row + i] += "!";
						return board[i];
					}
				}
			}

			// Проверяем диагональ \
			if (board[0] != null)
			{
				bool hasTicTacToe = true;
				for (int i = 1; i < row && hasTicTacToe; i++)
				{
					if (board[i * row + i] != board[0])
						hasTicTacToe = false;
				}
				if (hasTicTacToe)
				{
					for (int j = 0; j < row; j++)
						board[j * row + j] += "!";
					return board[0];
				}
			}

			// Проверяем диагональ /
			if (board[row - 1] != null)
			{
				bool hasTicTacToe = true;
				for (int i = 1; i < row && hasTicTacToe; i++)
				{
					if (board[i * row + (row - 1 - i)] != board[row - 1])
						hasTicTacToe = false;
				}
				if (hasTicTacToe)
				{
					for (int j = 0; j < row; j++)
						board[j* row + (row - 1 - j)] += "!";
					return board[row - 1];
				}
			}

			return null;
		}
	}
}
